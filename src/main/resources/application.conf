#Me ha pedido insalar el pluggin para dar formato de sintáxis al HOCON, que es la librería de ktor para trabajar con .conf
#Este fichero, es lo primera que necesita ktor, para leer la configuración del servidor.
#Por defecto no tengo que instalar nada para que entienda la configuraicón .conf, pero si he deshabilitado la librería para que
#no me coja la .yaml como primera opción.

#ktor.application.modules le indica a ktor, qué modulos cargar para iniciar el servidor.
#Con application.yml, la sintáxis cambia a :  com.ktor.MyApplicationKt.module

#El módulo específico que deberá ejecutar el servidor, se encuentra en com.ktor.MyApplication y el método que debe ejecutar en module()
              #com/ktor/MyAplication.Kt--> función module()

#ktor buscará la clase MyApplication.kt en el paquete com.ktor. Para ello, creará un aclase Applicationkt a partir del fichero MyApplication.kt
#1.- Al lanzar el servidor, se busca el método main ejecutando   io.ktor.server.netty.EngineMain.main(args). Esto hará que se cargue el servidor y
# se busque este mismo fichero application.conf, para leer las configuraciones. EngineMain es el encargado de arrancar el servidor Netty.
#2.- El servidor, leerá la configuración del puerto a la escucha, parámetros de la bbdd y demás.
#3.- kotlin, busca el módulo a cargar y para ello, crea una clase llamada MyApplicationkt, que se encuentra en el paquete com.ktor.MyApplication.kt
#4.- Cuando se cree la clase MyApplicationkt, invocará al método module
#5.- Tenemos que tener muy claro, que en nuestro MyApplication.kt, necesitamos el contexto de ktor y añadirle la función de extensión myModule.
#6.- Ktor hará una llamada de orden superior a myModule.

ktor {
  application {
    modules = [com.ktor.MyApplicationKt.myModule]
  }
  deployment {
    port = 8081
    host = "localhost"  # ip del servidor
  }
}
