package com.domain.security

import com.auth0.jwt.JWT
import com.auth0.jwt.algorithms.Algorithm
import io.ktor.server.auth.jwt.*
import java.sql.Date
/*
CON ESTE OBJECT, KTOR APRENDE A CREAR EL TOKEN Y A VERIFICARLO/VALIDARLO

Sabemos que el token lleva un payload con los datos que despu칠s comentaremos y sabemos que
se pueden leer sin problema en base64, por tanto el token no est치 encriptado. Lo que hace el
protocolo, es utilizar una clave secreta, para verificar si el token ha sido alterado o modificado.
Por ejemplo, cualquier que intente modificar el username que encierra el payload o la fecha de expiraci칩n,
al verificar su autentidad con la clave secreta, ver치 que ha sido alterado y por tanto la firma digital se rompe
con la NO aceptac칩n del token por parte del cliente.

1.- secret lo utiliza el algoritmo para firmar el token. Debe ser unica y secreta aqu칤. Garantiza la autenticidad.
2.- issuer lo utilizamos para identificar el dominio de la api.
3.- audience lo utiliza el servidor, para marcar qu칠 cliente es el que solicita los servicios.
4.- realm lo utiliza, para indicar un comentario de respuesta para aquellas solicitudes que
bien solicitan un endpoint protegido sin token, o s칤mplemente el token no es correcto. Le devolver칤a
informaci칩n de que es importante un contexto de autenticaci칩n.

El flujo ser칤a:
1.- El cliente se loguea con sus credenciales (usuario y password) y para ello el servidor le proporcina un token v치lido en el caso de que sea logueado correctamente.
2.- En el token, la api encapsula datos como el dominio, la audiencia, el contexto de autenticaci칩n, m치s otros datos como la fecha de expiraci칩n
 y algunos datos personalizados como el username/dni y utiliza
la clave secreta para firmar dicho token. Se genera, gracias al algoritmo de encirptaci칩n SHAC256.
3.- Dicho token se genera gracias al algoritmo de encriptaci칩n y se le env칤a al cliente.
4.- El cliente recibe el token, lo almacena y por cada enpoint, debe de mandarlo.  Authorization: Bearer <TOKEN>
5.- El servidor, recibe el token y lo valida con la clave secret.
   - verifica la fecha de expiraci칩n
   - verifica el issuer, audience.
   - extrae informaci칩n encapsulada como (dni/username)
6.- Si el token es v치lido, responder치 con el endpoint solicitado. En caso contrario, se mandar치 una response
con **401 Unauthorized** y un header `WWW-Authenticate` con el `realm`.

 */
object JwtConfig {
    private const val secret = "super_secret_key"  // 游댐 Cambia esto por algo m치s seguro
    private const val issuer = "domain.com"
    private const val audience = "ktor_audience"
    private const val realm = "ktor_realm"
    private val algorithm = Algorithm.HMAC256(secret)

    /*
    No quiero que expire. De lo contrario necesitar칤a un segundo token de refresco.
     */
    fun generateToken(username: String): String {
        return JWT.create()
            .withIssuer(issuer)
            .withAudience(audience)
            .withSubject("Authentication")
            .withClaim("username", username)
           // .withExpiresAt(Date(System.currentTimeMillis() + 600000))  // Expira en 10 min
            .sign(algorithm)
    }

    /*
    Se encargar치 de la verificaci칩n del token.
    1.- Se recibe un token y a partir del contexto de autenticaci칩n.
    2.- Se comprueba la validaci칩n del mismo utilizando verifier.
        - pasamos el algoritmo donde se define la clave secreta.
        - pasamos el dominio y la audience
        Si el issueer y la audience coincide con lo configurado, se acepta el token.
    3.- Si se acepta el token, ahora toca validarlo y extraer informaci칩n.
       - credential.payload (contiene la informaci칩n del payload en base64)
          - Extraemos el username y comprobamos que sea distinto de null. Si existe, se crea
          un objeto JWTPrincipal con la informaci칩n del payload. esto ser칤a valido:
          {
               "username": "john_doe"
          }
    4.- Faltar칤a tambi칠n verificar si el usuario existe en la BBDD. Puede que haya sido bloqueado
    o simplemente que no pueda acceder por privilegios.
     */
    fun configureAuthentication(config: JWTAuthenticationProvider.Config) {
        config.realm = realm
        config.verifier(
            JWT.require(algorithm)
                .withIssuer(issuer)
                .withAudience(audience)
                .build()
        )
        config.validate { credential ->
            if (credential.payload.getClaim("username").asString() != null) {
                JWTPrincipal(credential.payload)
            } else null
        }
    }
}